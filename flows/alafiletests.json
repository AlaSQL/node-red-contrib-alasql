[
    {
        "id": "a62b2385.ba7c8",
        "type": "tab",
        "label": "Sandbox"
    },
    {
        "id": "ac461d84.e7abc",
        "type": "tab",
        "label": "Alasql File In/Out"
    },
    {
        "id": "d772419e.8363c",
        "type": "function",
        "z": "a62b2385.ba7c8",
        "name": "Transform",
        "func": "msg.payload = '<html><head></head><body><h2>Hi world from function</h2></body></html>';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1dd88a4f.df1c96",
        "type": "http response",
        "z": "a62b2385.ba7c8",
        "name": "",
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "31f66d1b.376e42",
        "type": "http in",
        "z": "a62b2385.ba7c8",
        "name": "hi",
        "url": "/hi",
        "method": "get",
        "swaggerDoc": "",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "7304d742.303cf8"
            ]
        ]
    },
    {
        "id": "9bf52483.3fdc18",
        "type": "inject",
        "z": "a62b2385.ba7c8",
        "name": "High",
        "topic": "",
        "payload": "high",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 170,
        "y": 280,
        "wires": [
            [
                "8ab0a9be.0038b8"
            ]
        ]
    },
    {
        "id": "8ab0a9be.0038b8",
        "type": "function",
        "z": "a62b2385.ba7c8",
        "name": "Route Signal",
        "func": "var signal = msg.payload;\nif (signal === 'high') return [msg,null,null];\nelse if (signal === 'medium') return [null,msg,null];\nelse if (signal === 'low') return [null,null,msg];\n",
        "outputs": "3",
        "noerr": 0,
        "x": 370,
        "y": 320,
        "wires": [
            [
                "26c994dc.2ffeec"
            ],
            [
                "8dfee326.e8ee8"
            ],
            [
                "3049ac5a.f5cc34"
            ]
        ]
    },
    {
        "id": "26c994dc.2ffeec",
        "type": "debug",
        "z": "a62b2385.ba7c8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 570,
        "y": 280,
        "wires": []
    },
    {
        "id": "8dfee326.e8ee8",
        "type": "debug",
        "z": "a62b2385.ba7c8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 570,
        "y": 320,
        "wires": []
    },
    {
        "id": "3049ac5a.f5cc34",
        "type": "debug",
        "z": "a62b2385.ba7c8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 570,
        "y": 360,
        "wires": []
    },
    {
        "id": "5e31d5c9.43712c",
        "type": "inject",
        "z": "a62b2385.ba7c8",
        "name": "Medium",
        "topic": "",
        "payload": "medium",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 320,
        "wires": [
            [
                "8ab0a9be.0038b8"
            ]
        ]
    },
    {
        "id": "2e8b4606.b76c9a",
        "type": "inject",
        "z": "a62b2385.ba7c8",
        "name": "Low",
        "topic": "",
        "payload": "low",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 170,
        "y": 360,
        "wires": [
            [
                "8ab0a9be.0038b8"
            ]
        ]
    },
    {
        "id": "39da27df.7e9728",
        "type": "file",
        "z": "a62b2385.ba7c8",
        "name": "File out",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "x": 700,
        "y": 500,
        "wires": []
    },
    {
        "id": "686fd9b.04c9c28",
        "type": "comment",
        "z": "a62b2385.ba7c8",
        "name": "Request 'Hi' message",
        "info": "### Hi - Html Message\n\nGoing to [hi](/hi) will display Hi!",
        "x": 380,
        "y": 60,
        "wires": []
    },
    {
        "id": "7304d742.303cf8",
        "type": "template",
        "z": "a62b2385.ba7c8",
        "name": "Hi world",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE HTML>\n<html lang='en'>\n    <head>\n        <meta charset=\"utf-8\" />\n    </head>\n    <body>\n        <h2>Hi world</h2>\n    </body>\n</html>",
        "x": 380,
        "y": 100,
        "wires": [
            [
                "1dd88a4f.df1c96"
            ]
        ]
    },
    {
        "id": "d4de2d6d.d5694",
        "type": "http request",
        "z": "a62b2385.ba7c8",
        "name": "Web Seinfeld",
        "method": "GET",
        "ret": "obj",
        "url": "http://mysafeinfo.com/api/data?list=seinfeldepisodes&format=json",
        "tls": "",
        "x": 240,
        "y": 500,
        "wires": [
            [
                "33334ede.df8532"
            ]
        ]
    },
    {
        "id": "ef992323.ffc88",
        "type": "inject",
        "z": "a62b2385.ba7c8",
        "name": "Click Me",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 80,
        "y": 500,
        "wires": [
            [
                "d4de2d6d.d5694"
            ]
        ]
    },
    {
        "id": "ce7e7693.dbb5a8",
        "type": "csv",
        "z": "a62b2385.ba7c8",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": true,
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "seq,ss,ep,nm,dte",
        "x": 570,
        "y": 500,
        "wires": [
            [
                "39da27df.7e9728"
            ]
        ]
    },
    {
        "id": "33334ede.df8532",
        "type": "function",
        "z": "a62b2385.ba7c8",
        "name": "Direct payload",
        "func": "msg.filename = 'C:/Users/kim/Documents/seinfeld_from_web.csv';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 500,
        "wires": [
            [
                "ce7e7693.dbb5a8"
            ]
        ]
    },
    {
        "id": "b2c49670.c982f8",
        "type": "debug",
        "z": "a62b2385.ba7c8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 210,
        "y": 20,
        "wires": []
    },
    {
        "id": "723eddcb.6c3004",
        "type": "catch",
        "z": "a62b2385.ba7c8",
        "name": "",
        "scope": null,
        "x": 60,
        "y": 20,
        "wires": [
            [
                "b2c49670.c982f8"
            ]
        ]
    },
    {
        "id": "9302637.e6254a",
        "type": "comment",
        "z": "a62b2385.ba7c8",
        "name": "Direct multiple inputs to specific output",
        "info": "",
        "x": 370,
        "y": 220,
        "wires": []
    },
    {
        "id": "b6c91bfb.48a748",
        "type": "comment",
        "z": "a62b2385.ba7c8",
        "name": "Gather data from Web, transform, and store",
        "info": "",
        "x": 370,
        "y": 440,
        "wires": []
    },
    {
        "id": "37a5b272.eca84e",
        "type": "http request",
        "z": "ac461d84.e7abc",
        "name": "Seinfeld Episodes",
        "method": "GET",
        "ret": "obj",
        "url": "http://mysafeinfo.com/api/data?list=seinfeldepisodes&format=json",
        "tls": "",
        "x": 270,
        "y": 1140,
        "wires": [
            [
                "a8b88122.da845"
            ]
        ]
    },
    {
        "id": "bd30b35.f05c45",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 1000,
        "wires": []
    },
    {
        "id": "7506ce7.5cbf23",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "Click Me",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 100,
        "y": 1140,
        "wires": [
            [
                "37a5b272.eca84e"
            ]
        ]
    },
    {
        "id": "a8b88122.da845",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Set Filename",
        "func": "node.status({});\nif (global.get('working_dir') === '') {\n    node.error('Working directory not set',msg);\n    node.status({fill:'red',shape:'dot',text:'Working directory not set'});\n    return;\n}\n\nmsg.filename = global.get('working_dir') + 'seinfeld_episodes';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 1140,
        "wires": [
            [
                "bd30b35.f05c45",
                "53de6d0a.413344",
                "3867363f.1189da",
                "c7685a2f.8d6bb8",
                "ee889cf.1cc2f6",
                "b686bc6b.abb76"
            ]
        ]
    },
    {
        "id": "53de6d0a.413344",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "xls",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 1060,
        "wires": []
    },
    {
        "id": "3867363f.1189da",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "csv",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c7685a2f.8d6bb8",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "json",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 1180,
        "wires": []
    },
    {
        "id": "ee889cf.1cc2f6",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "tab",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 1240,
        "wires": []
    },
    {
        "id": "b686bc6b.abb76",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "txt",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 1300,
        "wires": []
    },
    {
        "id": "de6450e.8d872b",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "sql",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 1360,
        "wires": []
    },
    {
        "id": "a43b148d.59bee8",
        "type": "http request",
        "z": "ac461d84.e7abc",
        "name": "Seinfeld Episodes",
        "method": "GET",
        "ret": "obj",
        "url": "http://mysafeinfo.com/api/data?list=seinfeldepisodes&format=json",
        "tls": "",
        "x": 290,
        "y": 520,
        "wires": [
            [
                "97b84e0b.db69a"
            ]
        ]
    },
    {
        "id": "5b550e05.6bb05",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "Click Me",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 100,
        "y": 520,
        "wires": [
            [
                "a43b148d.59bee8"
            ]
        ]
    },
    {
        "id": "97b84e0b.db69a",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "csv",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 520,
        "wires": []
    },
    {
        "id": "d1b0cd98.c7f98",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "No filename given in either msg.filename or in the node configuration.",
        "info": "",
        "x": 270,
        "y": 780,
        "wires": []
    },
    {
        "id": "ed127e79.66396",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "Click Me",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 100,
        "y": 820,
        "wires": [
            [
                "d06be931.67d6e8"
            ]
        ]
    },
    {
        "id": "d06be931.67d6e8",
        "type": "http request",
        "z": "ac461d84.e7abc",
        "name": "Seinfeld Episodes",
        "method": "GET",
        "ret": "obj",
        "url": "http://mysafeinfo.com/api/data?list=seinfeldepisodes&format=json",
        "tls": "",
        "x": 290,
        "y": 820,
        "wires": [
            [
                "23de6c8d.edcd34"
            ]
        ]
    },
    {
        "id": "23de6c8d.edcd34",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "csv",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 820,
        "wires": []
    },
    {
        "id": "a3f4e0fe.07655",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "Output with Filename in msg.filename.",
        "info": "",
        "x": 170,
        "y": 580,
        "wires": []
    },
    {
        "id": "b7bd33b3.2109e",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "Click Me",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 100,
        "y": 620,
        "wires": [
            [
                "86837c7a.e4edb"
            ]
        ]
    },
    {
        "id": "86837c7a.e4edb",
        "type": "http request",
        "z": "ac461d84.e7abc",
        "name": "Seinfeld Episodes",
        "method": "GET",
        "ret": "obj",
        "url": "http://mysafeinfo.com/api/data?list=seinfeldepisodes&format=json",
        "tls": "",
        "x": 290,
        "y": 620,
        "wires": [
            [
                "5d0325b9.f7649c"
            ]
        ]
    },
    {
        "id": "de1d8fe5.2b0aa",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "csv",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 620,
        "wires": []
    },
    {
        "id": "5d0325b9.f7649c",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Set Filename",
        "func": "node.status({});\nif (global.get('working_dir') === '') {\n    node.error('Working directory not set',msg);\n    node.status({fill:'red',shape:'dot',text:'Working directory not set'});\n    return;\n}\n\nmsg.filename = global.get('working_dir') + 'seinfeld_episodes';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 620,
        "wires": [
            [
                "de1d8fe5.2b0aa"
            ]
        ]
    },
    {
        "id": "1c247854.586f48",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "Output with Filename in the node configuration",
        "info": "",
        "x": 200,
        "y": 480,
        "wires": []
    },
    {
        "id": "41d45c2.74859a4",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "ala sql file out - output format tests",
        "info": "",
        "x": 400,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b62ab8cc.0057a8",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "No msg.payload",
        "info": "",
        "x": 100,
        "y": 880,
        "wires": []
    },
    {
        "id": "87faade0.07f03",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "Click Me",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 100,
        "y": 920,
        "wires": [
            [
                "d1702bfc.1663c8"
            ]
        ]
    },
    {
        "id": "d1702bfc.1663c8",
        "type": "http request",
        "z": "ac461d84.e7abc",
        "name": "Seinfeld Episodes",
        "method": "GET",
        "ret": "obj",
        "url": "http://mysafeinfo.com/api/data?list=seinfeldepisodes&format=json",
        "tls": "",
        "x": 290,
        "y": 920,
        "wires": [
            [
                "f062dcb5.e069"
            ]
        ]
    },
    {
        "id": "6c37d839.e5d2f8",
        "type": "ala-file out",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "csv",
        "columns": "*",
        "headers": true,
        "x": 670,
        "y": 920,
        "wires": []
    },
    {
        "id": "f062dcb5.e069",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Delete Payload",
        "func": "msg.filename = 'C:/Users/kim/Documents/seinfeld_episodes';\ndelete msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 920,
        "wires": [
            [
                "6c37d839.e5d2f8"
            ]
        ]
    },
    {
        "id": "6537dfb.1fb482",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "ala sql file out - exception tests",
        "info": "",
        "x": 410,
        "y": 680,
        "wires": []
    },
    {
        "id": "da8a5272.0aceb",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "All Error out",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 250,
        "y": 740,
        "wires": [
            [
                "a925e2bd.4911e"
            ]
        ]
    },
    {
        "id": "9e7ccb56.153e68",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "ala file out - basic tests",
        "info": "",
        "x": 420,
        "y": 380,
        "wires": []
    },
    {
        "id": "a925e2bd.4911e",
        "type": "http request",
        "z": "ac461d84.e7abc",
        "name": "Seinfeld Episodes",
        "method": "GET",
        "ret": "obj",
        "url": "http://mysafeinfo.com/api/data?list=seinfeldepisodes&format=json",
        "tls": "",
        "x": 450,
        "y": 740,
        "wires": [
            [
                "23de6c8d.edcd34",
                "f062dcb5.e069"
            ]
        ]
    },
    {
        "id": "f2099ab0.455338",
        "type": "http request",
        "z": "ac461d84.e7abc",
        "name": "Seinfeld Episodes",
        "method": "GET",
        "ret": "obj",
        "url": "http://mysafeinfo.com/api/data?list=seinfeldepisodes&format=json",
        "tls": "",
        "x": 450,
        "y": 440,
        "wires": [
            [
                "97b84e0b.db69a",
                "5d0325b9.f7649c"
            ]
        ]
    },
    {
        "id": "f427d414.d1c588",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "All Basic out",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 250,
        "y": 440,
        "wires": [
            [
                "f2099ab0.455338"
            ]
        ]
    },
    {
        "id": "e4556da3.51227",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "Alasql File In/Out Node Tests",
        "info": "\nThese flows do some common tests of the `node-red-contrib-alasql` file in/out\nnodes.\n\nThe flows are pretty basic and use data describing episodes of the Seinfeld\ntv sitcom available from [http://mysafeinfo.com](http://mysafeinfo.com).\n\nThe data is at \n * http://mysafeinfo.com/api/data?list=seinfeldepisodes&format=json\n\nOther than the `node-red-contrib-alasql` nodes, all nodes used are in the\n`node-red` default install :\n * inject\n * catch\n * status\n * debug\n * function\n * comment\n * http request\n * ala file in\n * ala file out\n",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "47cb7e32.68299",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "In/Out Directory",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "b55d8d79.0fb24"
            ]
        ]
    },
    {
        "id": "b55d8d79.0fb24",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Set working directory",
        "func": "// Set a global variable containing working directory for in/out files\n// Remember to put a trailing '/' ;)\n//   global.set('working_dir','c:/users/kim/documents/'); // Example\nglobal.set('working_dir','.flotsam/'); \n\nif (global.get('working_dir') === '') {\n    node.status({fill:'red',shape:'dot',text:'Working directory not set'});\n    return;\n}\nelse {\n    node.status({fill:\"green\",shape:\"dot\",text: ' ' + global.get(\"working_dir\")});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "23165164.b4aefe",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "Select comments and read 'Info' tab in the Sidebar (ctrl-space) for handy tips",
        "info": "You might find some helpful information in the comments.\n\nOf course, you can delete them as you wish - they do not impact any of the flows.\n\n",
        "x": 270,
        "y": 20,
        "wires": []
    },
    {
        "id": "521cf346.90bbdc",
        "type": "catch",
        "z": "ac461d84.e7abc",
        "name": "",
        "scope": null,
        "x": 400,
        "y": 240,
        "wires": [
            [
                "de3caa15.ec79c8"
            ]
        ]
    },
    {
        "id": "66422477.c36b0c",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "Error Handler",
        "info": "These are two flows which display errors and statuses.\n\n`node-red-contrib-alasql` nodes generally use status messages to display\nany issues that occur. Status messages are displayed in the 'Sidebar' \n(ctrl-space) *debug* tab. By default All Status messages are not routed to the\n`debug` tab (to prevent spaming the tab with a bunch of messages).\nTurn on/off by pressing the 'button' on rightside of the `To debug tab` node.\n\nError messages are displayed as a status underneath the `Error Message` node.\nThe button on the left of the `Reset` node clears the error message from the display.\n\nThe `Status filter` and `Error Message` function nodes can be edited to filter\nthe messages that are displayed.",
        "x": 90,
        "y": 220,
        "wires": []
    },
    {
        "id": "de3caa15.ec79c8",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Error Message",
        "func": "if (msg.error) {\n    node.status({fill:'red',shape:'dot',text:msg.error.message});\n}\nelse {\n    node.status({});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "771ead99.d05234",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "reset",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 250,
        "y": 240,
        "wires": [
            [
                "de3caa15.ec79c8"
            ]
        ]
    },
    {
        "id": "a22bb312.bce4b",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "Change the filename first!!!",
        "info": "Change the output `file name` of this node.\n\nOptionally, any other config parameters to your liking.\n\nThen delete this comment to get it outta the way.",
        "x": 760,
        "y": 500,
        "wires": []
    },
    {
        "id": "abb0c4f8.6ab878",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "Edit working directory first!!!",
        "info": "Edit the `Set working directory` function. \n\nChange the global `working_dir` value at the beginning of the function to the\npath where alasql files will be read/written.\n\nThe directory you specify by editing `Set working_dir` function node at the top\nof the page.\nOpen the function and change the first line to be the path you wish files to\nbe stored. Deploy and the directory will be set. You can also\nclick `In/Out Directory` node button as well, but normally not needed.\n\nThe directory path will be in `global.get('working_dir')` field for all nodes on\nall flow pages (tabs??).\n\n*Remember not to forget the trailing '/' at the end of the directory path.*\n\nIf you are restarting the server frequently during development - can add the\npath to the `functionGlobalContext` section of the user-directory\n**settings.js** file similar to :\n\n```js\n    functionGlobalContext: {\n        ...\n        working_dir: 'c:/alasql/file/directory/',\n        ...\n    },\n```\nwhich will automatically assign the path on re-starts, thus can remove the\n`In/Out Directory->Set working_dir` flow.\n\nThen delete this comment to get it outta the way.",
        "x": 640,
        "y": 100,
        "wires": []
    },
    {
        "id": "d58742b5.68ed9",
        "type": "status",
        "z": "ac461d84.e7abc",
        "name": "",
        "scope": null,
        "x": 240,
        "y": 200,
        "wires": [
            [
                "8ec912ee.98a98"
            ]
        ]
    },
    {
        "id": "9f985879.e44358",
        "type": "debug",
        "z": "ac461d84.e7abc",
        "name": "To debug tab",
        "active": false,
        "console": "false",
        "complete": "status.text",
        "x": 590,
        "y": 200,
        "wires": []
    },
    {
        "id": "8ec912ee.98a98",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Status Filter",
        "func": "if (msg.status.text && msg.status.text !== '') {\n    return msg;    \n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 200,
        "wires": [
            [
                "9f985879.e44358"
            ]
        ]
    },
    {
        "id": "ca5589cf.f59088",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "Alasql File In/Out Filepath",
        "info": "'drive:/path/name.ext'\n\nIt is highly recommended that you fully qualify the file path/name which the\nalasql files will be read/written. The flows in these tests can be\nhelpful to that end which use a global variable `working_dir` to specify the\ndirectory. The filename is appended to that variable in the `Set Filename`\nfunction nodes.\n\n*See the `Edit working directory first!!!` comment for information about setting\nthe `working_dir`.*\n\nThe file extension is **not set**, regardless if entering the\n`File name` in the node config or passing via `msg.filename`. alasql nodes set\nthe extension automatically.\n\nLeave the `File name` parameter empty if passing `msg.filename` to the node. \nThe `File name` parameter will override the `msg.filename` passed to the\nnode. *The `File name` parameter requires the fully qualified pathname without\nthe extension. ie: 'drive:/path/name'*\n\nFile extensions are based on the `format` parameter when you configure the node\nin the editor. The node extension is based on the selected `format`; \nfile contents will be in that format with the extension appropriate for that\nformat.\n\n*Generally, leave the `name` parameter blank. By simply changing the `format`\nparameter the file contents, extension, and node display name will be handled\nautomatically. Makes switching formats super easy!*\n\nNodejs will handle converting '/'(slash) to '\\'(backslash) so no-worries there\nunless sending the filepath to a Windows batch process - which would probably\nrequire a `msg.filename.replace('/','\\\\');` or something to that effect prior\nto `exec` the command.\n\n\n",
        "x": 430,
        "y": 60,
        "wires": []
    },
    {
        "id": "5e6b018d.6211",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "All Tests",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 100,
        "y": 320,
        "wires": [
            [
                "127db3ae.5eaa2c"
            ]
        ]
    },
    {
        "id": "4bba336d.9ad7bc",
        "type": "link in",
        "z": "ac461d84.e7abc",
        "name": "All Basic out",
        "links": [
            "127db3ae.5eaa2c"
        ],
        "x": 95,
        "y": 440,
        "wires": [
            [
                "f2099ab0.455338"
            ]
        ]
    },
    {
        "id": "127db3ae.5eaa2c",
        "type": "link out",
        "z": "ac461d84.e7abc",
        "name": "",
        "links": [
            "4bba336d.9ad7bc",
            "b4f108c3.dd6738",
            "f5be679b.0751f8"
        ],
        "x": 215,
        "y": 320,
        "wires": []
    },
    {
        "id": "b4f108c3.dd6738",
        "type": "link in",
        "z": "ac461d84.e7abc",
        "name": "All Errors",
        "links": [
            "127db3ae.5eaa2c"
        ],
        "x": 95,
        "y": 740,
        "wires": [
            [
                "a925e2bd.4911e"
            ]
        ]
    },
    {
        "id": "f5be679b.0751f8",
        "type": "link in",
        "z": "ac461d84.e7abc",
        "name": "Format Tests out",
        "links": [
            "127db3ae.5eaa2c"
        ],
        "x": 95,
        "y": 1100,
        "wires": [
            [
                "37a5b272.eca84e"
            ]
        ]
    },
    {
        "id": "2e738411.e3428c",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "Test not implemented",
        "info": "Test for SQL output has not been implemented yet",
        "x": 520,
        "y": 1360,
        "wires": []
    },
    {
        "id": "916944d2.20e7c8",
        "type": "inject",
        "z": "ac461d84.e7abc",
        "name": "Click Me",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 1580,
        "wires": [
            [
                "b1336c8c.cc807"
            ]
        ]
    },
    {
        "id": "b1336c8c.cc807",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Set Filename",
        "func": "node.status({});\nif (global.get('working_dir') === '') {\n    node.error('Working directory not set',msg);\n    node.status({fill:'red',shape:'dot',text:'Working directory not set'});\n    return;\n}\n\nmsg.filename = global.get('working_dir') + 'seinfeld_episodes';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 140,
        "y": 1660,
        "wires": [
            [
                "9683d208.c494",
                "2fbb1110.c55ade"
            ]
        ]
    },
    {
        "id": "a04bf706.73cd78",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "ala sql file in - input format tests",
        "info": "",
        "x": 170,
        "y": 1440,
        "wires": []
    },
    {
        "id": "416088f6.a614e8",
        "type": "ala-file in",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "xlsx",
        "columns": "*",
        "headers": true,
        "x": 350,
        "y": 1500,
        "wires": [
            [
                "783ad840.84d8d8"
            ]
        ]
    },
    {
        "id": "783ad840.84d8d8",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Count Records",
        "func": "node.status({});\nvar record_count = msg.payload.length;\nif (record_count > 0) {\n    node.status({fill:'green',shape:'dot',text:'Records: ' + record_count});\n}\nelse {\n    node.status({fill:'red',shape:'dot',text:'Records: ' + record_count});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "126adc4d.29c084",
        "type": "ala-file in",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "xls",
        "columns": "*",
        "headers": true,
        "x": 350,
        "y": 1580,
        "wires": [
            [
                "e0d67eda.89c79"
            ]
        ]
    },
    {
        "id": "e1d8ede.3fbbe1",
        "type": "ala-file in",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "csv",
        "columns": "*",
        "headers": true,
        "x": 350,
        "y": 1660,
        "wires": [
            [
                "3665c63f.4e1e4a"
            ]
        ]
    },
    {
        "id": "3b2d6d2d.6e1912",
        "type": "ala-file in",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "json",
        "columns": "*",
        "headers": true,
        "x": 350,
        "y": 1740,
        "wires": [
            [
                "6a5fb619.bdacc8"
            ]
        ]
    },
    {
        "id": "9683d208.c494",
        "type": "ala-file in",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "tab",
        "columns": "*",
        "headers": true,
        "x": 350,
        "y": 1820,
        "wires": [
            [
                "89d572a1.70ec"
            ]
        ]
    },
    {
        "id": "2fbb1110.c55ade",
        "type": "ala-file in",
        "z": "ac461d84.e7abc",
        "name": "",
        "filename": "",
        "format": "txt",
        "columns": "*",
        "headers": true,
        "x": 350,
        "y": 1900,
        "wires": [
            [
                "a5e9be55.f989c"
            ]
        ]
    },
    {
        "id": "5360ff6e.a5612",
        "type": "comment",
        "z": "ac461d84.e7abc",
        "name": "Read from files created above",
        "info": "",
        "x": 510,
        "y": 1440,
        "wires": []
    },
    {
        "id": "e0d67eda.89c79",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Count Records",
        "func": "node.status({});\nvar record_count = msg.payload.length;\nif (record_count > 0) {\n    node.status({fill:'green',shape:'dot',text:'Records: ' + record_count});\n}\nelse {\n    node.status({fill:'red',shape:'dot',text:'Records: ' + record_count});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "3665c63f.4e1e4a",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Count Records",
        "func": "node.status({});\nvar record_count = msg.payload.length;\nif (record_count > 0) {\n    node.status({fill:'green',shape:'dot',text:'Records: ' + record_count});\n}\nelse {\n    node.status({fill:'red',shape:'dot',text:'Records: ' + record_count});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "6a5fb619.bdacc8",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Count Records",
        "func": "node.status({});\nvar record_count = msg.payload.length;\nif (record_count > 0) {\n    node.status({fill:'green',shape:'dot',text:'Records: ' + record_count});\n}\nelse {\n    node.status({fill:'red',shape:'dot',text:'Records: ' + record_count});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "89d572a1.70ec",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Count Records",
        "func": "node.status({});\nvar record_count = msg.payload.length;\nif (record_count > 0) {\n    node.status({fill:'green',shape:'dot',text:'Records: ' + record_count});\n}\nelse {\n    node.status({fill:'red',shape:'dot',text:'Records: ' + record_count});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "a5e9be55.f989c",
        "type": "function",
        "z": "ac461d84.e7abc",
        "name": "Count Records",
        "func": "node.status({});\nvar record_count = msg.payload.length;\nif (record_count > 0) {\n    node.status({fill:'green',shape:'dot',text:'Records: ' + record_count});\n}\nelse {\n    node.status({fill:'red',shape:'dot',text:'Records: ' + record_count});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1880,
        "wires": [
            []
        ]
    }
]